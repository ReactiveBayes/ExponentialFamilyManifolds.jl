var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ExponentialFamilyManifolds","category":"page"},{"location":"#ExponentialFamilyManifolds","page":"Home","title":"ExponentialFamilyManifolds","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ExponentialFamilyManifolds.jl provides implementations of manifolds for the natural parameters of exponential family distributions, using Manifolds.jl. These manifolds are compatible with ManifoldsBase.jl, enabling optimization of the natural parameters of exponential family distributions using Manopt.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The primary operation in the package is the get_natural_manifold function, which returns the appropriate manifold for the natural parameters of a given exponential family member type, its dimension and (if required) conditioner. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"ExponentialFamilyManifolds.get_natural_manifold","category":"page"},{"location":"#ExponentialFamilyManifolds.get_natural_manifold","page":"Home","title":"ExponentialFamilyManifolds.get_natural_manifold","text":"get_natural_manifold(::Type{T}, dims, conditioner = nothing)\n\nThe function returns a corresponding manifold for the natural parameters of distribution of type T. Optionally accepts the conditioner, which is set to nothing by default. Use empty tuple () for univariate distributions. \n\njulia> using ExponentialFamily, ExponentialFamilyManifolds\n\njulia> ExponentialFamilyManifolds.get_natural_manifold(Beta, ()) isa ExponentialFamilyManifolds.NaturalParametersManifold\ntrue\n\njulia> ExponentialFamilyManifolds.get_natural_manifold(MvNormalMeanCovariance, (3, )) isa ExponentialFamilyManifolds.NaturalParametersManifold\ntrue\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"The get_natural_manifold function returns NaturalParametersManifold manifold, which is a wrapper around the actual manifold (the base) for the natural parameters that stores extra useful properties and provides the necessary operations for optimization with Manopt.jl. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ExponentialFamilyManifolds, ExponentialFamily\n\nExponentialFamilyManifolds.get_natural_manifold(Beta, (), nothing)","category":"page"},{"location":"","page":"Home","title":"Home","text":"ExponentialFamilyManifolds.NaturalParametersManifold","category":"page"},{"location":"#ExponentialFamilyManifolds.NaturalParametersManifold","page":"Home","title":"ExponentialFamilyManifolds.NaturalParametersManifold","text":"NaturalParametersManifold(::Type{T}, dims, base, conditioner)\n\nThe manifold for the natural parameters of the distribution of type T with dimensions dims. An internal structure, use get_natural_manifold to create an instance of a manifold for the natural parameters of distribution of type T.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"Its not advised to use the NaturalParametersManifold to create a manifold, but instead use the get_natural_manifold function.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Natural-manifold-base","page":"Home","title":"Natural manifold base","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The get_natural_manifold_base function returns the base manifold without the wrapper. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"ExponentialFamilyManifolds.get_natural_manifold_base(Beta, (), nothing)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The base manifold, however, does not encode the information about the conditioner, hence, it cannot be used for all exponential members. Additionally, it does not encode the type of the underlying exponential family members. For instance, the LogNormal and the univariate Normal distribution share the same base manifold, yet they represent different members of the exponential family of distributions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"ExponentialFamilyManifolds.get_natural_manifold_base","category":"page"},{"location":"#ExponentialFamilyManifolds.get_natural_manifold_base","page":"Home","title":"ExponentialFamilyManifolds.get_natural_manifold_base","text":"get_natural_manifold_base(M::NaturalParametersManifold)\nget_natural_manifold_base(::Type{T}, dims, conditioner = nothing)\n\nReturns base manifold for the distribution of type T of dimension dims. Optionally accepts the conditioner, which is set to nothing by default.\n\n\n\n\n\nget_natural_manifold_base(::Type{Bernoulli}, ::Tuple{}, conditioner=nothing)\n\nGet the natural manifold base for the Bernoulli distribution.\n\n\n\n\n\nget_natural_manifold_base(::Type{Beta}, ::Tuple{}, conditioner=nothing)\n\nGet the natural manifold base for the Beta distribution.\n\n\n\n\n\nget_natural_manifold_base(::Type{Chisq}, ::Tuple{}, conditioner=nothing)\n\nGet the natural manifold base for the Chisq distribution.\n\n\n\n\n\nget_natural_manifold_base(::Type{Dirichlet}, dims::Tuple{Int}, conditioner=nothing)\n\nGet the natural manifold base for the Dirichlet distribution.\n\n\n\n\n\nget_natural_manifold_base(::Type{Exponential}, ::Tuple{}, conditioner=nothing)\n\nGet the natural manifold base for the Exponential distribution.\n\n\n\n\n\nget_natural_manifold_base(::Type{Gamma}, ::Tuple{}, conditioner=nothing)\n\nGet the natural manifold base for the Gamma distribution.\n\n\n\n\n\nget_natural_manifold_base(::Type{Geometric}, ::Tuple{}, conditioner=nothing)\n\nGet the natural manifold base for the Geometric distribution.\n\n\n\n\n\nget_natural_manifold_base(::Type{Laplace}, ::Tuple{}, conditioner=nothing)\n\nGet the natural manifold base for the Laplace distribution.\n\n\n\n\n\nget_natural_manifold_base(::Type{LogNormal}, ::Tuple{}, conditioner=nothing)\n\nGet the natural manifold base for the LogNormal distribution.\n\n\n\n\n\nget_natural_manifold_base(::Type{NormalMeanVariance}, ::Tuple{}, conditioner = nothing)\n\nGet the natural manifold base for the NormalMeanVariance distribution.\n\n\n\n\n\nget_natural_manifold_base(::Type{MvNormalMeanCovariance}, dims::Tuple{Int}, conditioner = nothing)\n\nGet the natural manifold base for the MvNormalMeanCovariance distribution.\n\n\n\n\n\nget_natural_manifold_base(::Type{Rayleigh}, ::Tuple{}, conditioner=nothing)\n\nGet the natural manifold base for the Rayleigh distribution.\n\n\n\n\n\nget_natural_manifold_base(::Type{Pareto}, ::Tuple{}, conditioner=nothing)\n\nGet the natural manifold base for the Pareto distribution.\n\n\n\n\n\nget_natural_manifold_base(::Type{Poisson}, ::Tuple{}, conditioner=nothing)\n\nGet the natural manifold base for the Poisson distribution.\n\n\n\n\n\nget_natural_manifold_base(::Type{Weibull}, ::Tuple{}, conditioner=nothing)\n\nGet the natural manifold base for the Weibull distribution.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Product-manifolds","page":"Home","title":"Product manifolds","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Some base manifolds are known as Product Manifolds, which consist of several manifolds combined together. For example, the natural parameters of a multivariate Normal distribution form a product of a Euclidean vector manifold and a symmetric negative definite matrix manifold. The partition_point function takes a plain vector of natural parameters and (typically, but not always) returns a partitioned array for each submanifold in the form of an ArrayPartition from RecursiveArrayTools.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"M = ExponentialFamilyManifolds.get_natural_manifold(Beta, (), nothing)\np = ExponentialFamilyManifolds.partition_point(M, [ 1.0, 2.0 ])","category":"page"},{"location":"","page":"Home","title":"Home","text":"typeof(p)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The partitioned point functions as a regular vector but encodes the structure of the product manifold, allowing differentiation between the submanifolds within the vector.","category":"page"},{"location":"","page":"Home","title":"Home","text":"ExponentialFamilyManifolds.ManifoldsBase.submanifold_component(p, 1)","category":"page"},{"location":"","page":"Home","title":"Home","text":"ExponentialFamilyManifolds.ManifoldsBase.submanifold_component(p, 2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"ExponentialFamilyManifolds.partition_point","category":"page"},{"location":"#ExponentialFamilyManifolds.partition_point","page":"Home","title":"ExponentialFamilyManifolds.partition_point","text":"partition_point(M::NaturalParametersManifold, p)\npartition_point(::Type{T}, dims, point, conditioner=nothing)\n\nConverts the point to a compatible representation for the natural manifold M of type T.\n\n\n\n\n\npartition_point(::Type{Bernoulli}, ::Tuple{}, p, conditioner=nothing)\n\nConverts the point to a compatible representation for the natural manifold of type Bernoulli.\n\n\n\n\n\npartition_point(::Type{Beta}, ::Tuple{}, p, conditioner=nothing)\n\nConverts the point to a compatible representation for the natural manifold of type Beta.\n\n\n\n\n\npartition_point(::Type{Chisq}, ::Tuple{}, p, conditioner=nothing)\n\nConverts the point to a compatible representation for the natural manifold of type Chisq.\n\n\n\n\n\npartition_point(::Type{Dirichlet}, dims::Tuple{Int}, p, conditioner=nothing)\n\nConverts the point to a compatible representation for the natural manifold of type Dirichlet.\n\n\n\n\n\npartition_point(::Type{Exponential}, ::Tuple{}, p, conditioner=nothing)\n\nConverts the point to a compatible representation for the natural manifold of type Exponential.\n\n\n\n\n\npartition_point(::Type{Gamma}, ::Tuple{}, p, conditioner=nothing)\n\nConverts the point to a compatible representation for the natural manifold of type Gamma.\n\n\n\n\n\npartition_point(::Type{Geometric}, ::Tuple{}, p, conditioner=nothing)\n\nConverts the point to a compatible representation for the natural manifold of type Geometric.\n\n\n\n\n\npartition_point(::Type{Laplace}, ::Tuple{}, p, conditioner=nothing)\n\nConverts the point to a compatible representation for the natural manifold of type Laplace.\n\n\n\n\n\npartition_point(::Type{LogNormal}, ::Tuple{}, p, conditioner=nothing)\n\nConverts the point to a compatible representation for the natural manifold of type LogNormal.\n\n\n\n\n\npartition_point(::Type{NormalMeanVariance}, ::Tuple{}, p, conditioner = nothing)\n\nConverts the point to a compatible representation for the natural manifold of type NormalMeanVariance.\n\n\n\n\n\npartition_point(::Type{MvNormalMeanCovariance}, dims::Tuple{Int}, p, conditioner = nothing)\n\nConverts the point to a compatible representation for the natural manifold of type MvNormalMeanCovariance.\n\n\n\n\n\npartition_point(::Type{Rayleigh}, ::Tuple{}, p, conditioner=nothing)\n\nConverts the point to a compatible representation for the natural manifold of type Laplace.\n\n\n\n\n\npartition_point(::Type{Pareto}, ::Tuple{}, p, conditioner=nothing)\n\nConverts the point to a compatible representation for the natural manifold of type Pareto.\n\n\n\n\n\npartition_point(::Type{Poisson}, ::Tuple{}, p, conditioner=nothing)\n\nConverts the point to a compatible representation for the natural manifold of type Poisson.\n\n\n\n\n\npartition_point(::Type{Weibull}, ::Tuple{}, p, conditioner=nothing)\n\nConverts the point to a compatible representation for the natural manifold of type Weibull.\n\n\n\n\n\n","category":"function"},{"location":"#Custom-generic-manifolds","page":"Home","title":"Custom generic manifolds","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ExponentialFamilyManifolds.jl introduces additional manifolds not included in Manifolds.jl. This is crucial because certain exponential family distributions have natural parameters that require specific manifolds, such as negative definite matrices for the multivariate Gaussian distribution. These manifolds do not implement every operation defined in ManifoldsBase.jl, but they do provide the essential operations needed for optimization with Manopt.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"ExponentialFamilyManifolds.ShiftedPositiveNumbers\nExponentialFamilyManifolds.ShiftedNegativeNumbers\nExponentialFamilyManifolds.SymmetricNegativeDefinite","category":"page"},{"location":"#ExponentialFamilyManifolds.ShiftedPositiveNumbers","page":"Home","title":"ExponentialFamilyManifolds.ShiftedPositiveNumbers","text":"ShiftedPositiveNumbers(shift)\n\nA manifold representing the positive numbers shifted by shift.  The points on this manifold are 1-dimensional vectors with a single element.\n\n\n\n\n\n","category":"type"},{"location":"#ExponentialFamilyManifolds.ShiftedNegativeNumbers","page":"Home","title":"ExponentialFamilyManifolds.ShiftedNegativeNumbers","text":"ShiftedNegativeNumbers(shift)\n\nA manifold representing the negative numbers shifted by shift. The points on this manifold are 1-dimensional vectors with a single element.\n\n\n\n\n\n","category":"type"},{"location":"#ExponentialFamilyManifolds.SymmetricNegativeDefinite","page":"Home","title":"ExponentialFamilyManifolds.SymmetricNegativeDefinite","text":"SymmetricNegativeDefinite(k)\n\nThis manifold represents the set of negative definite matrices of size k × k.  Similar to SymmetricPositiveDefinite from Manifolds.jl with the exception that the matrices are negative definite.\n\n\n\n\n\n","category":"type"},{"location":"#Optimization-example","page":"Home","title":"Optimization example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Suppose, we have a set of samples from a certain exponential family distribution and we want to estimate the natural parameters of the distribution using the Manopt.jl package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ExponentialFamily, Distributions, Plots, StableRNGs\n\nrng  = StableRNG(42)\ndist = Beta(24, 6)\ndata = rand(rng, dist, 200)\n\nhistogram(data, xlim = (0, 1), label = \"data\", normalize=:pdf)","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Manopt, ForwardDiff, ExponentialFamilyManifolds\n\n# cost function\nfunction f(M, p) \n    ef = convert(ExponentialFamilyDistribution, M, p)\n    return -sum((d) -> logpdf(ef, d), data)\nend\n\n# gradient function\nfunction g(M, p)\n    return ForwardDiff.gradient((p) -> f(M, p), p)\nend\n\nM = ExponentialFamilyManifolds.get_natural_manifold(Beta, ())\np = rand(rng, M)\nq = gradient_descent(M, f, g, p)\n\nq_ef = convert(ExponentialFamilyDistribution, M, q)\nq_η  = getnaturalparameters(q_ef)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that we performed the optimization in the natural parameters space, we can use ExponentialFamily.jl API to convert the vector fo natural parameters to the corresponding mean parameter space:","category":"page"},{"location":"","page":"Home","title":"Home","text":"map(NaturalParametersSpace() => MeanParametersSpace(), Beta, q_η)","category":"page"},{"location":"","page":"Home","title":"Home","text":"As we can see the result is quite close to the actual distribution, which was used to generate the test data:","category":"page"},{"location":"","page":"Home","title":"Home","text":"params(MeanParametersSpace(), dist)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let's also check the result, by plotting the estimated distribution on top of the data.","category":"page"},{"location":"","page":"Home","title":"Home","text":"histogram(data, xlim = (0, 1), label = \"data\", normalize=:pdf, fillalpha = 0.3)\nplot!(0.0:0.01:1.0, (x) -> pdf(dist, x), label = \"actual\", fill = 0, fillalpha = 0.2)\nplot!(0.0:0.01:1.0, (x) -> pdf(q_ef, x), label = \"estimated\", fill = 0, fillalpha = 0.5)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The difference in KL is quite small as well:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Test #hide\n@test kldivergence(convert(Distribution, q_ef), dist) < 4e-3 #hide\nkldivergence(convert(Distribution, q_ef), dist)","category":"page"},{"location":"#Helpers","page":"Home","title":"Helpers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ExponentialFamilyManifolds.Negated","category":"page"},{"location":"#ExponentialFamilyManifolds.Negated","page":"Home","title":"ExponentialFamilyManifolds.Negated","text":"Negated(m)\n\nLazily negates the matrix m, without creating a new matrix.  Works by redefining the getindex.\n\njulia> using ExponentialFamilyManifolds\n\njulia> m = [1 2; 3 4]\n2×2 Matrix{Int64}:\n 1  2\n 3  4\n\njulia> N = ExponentialFamilyManifolds.Negated(m)\n2×2 ExponentialFamilyManifolds.Negated{Int64, Matrix{Int64}}:\n -1  -2\n -3  -4\n\njulia> N[1, 2]\n-2\n\n\n\n\n\n","category":"type"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
