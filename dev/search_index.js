var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ExponentialFamilyManifolds","category":"page"},{"location":"#ExponentialFamilyManifolds","page":"Home","title":"ExponentialFamilyManifolds","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ExponentialFamilyManifolds.jl provides implementations of manifolds for the natural parameters of exponential family distributions, using Manifolds.jl. These manifolds are compatible with ManifoldsBase.jl, enabling optimization of the natural parameters of exponential family distributions using Manopt.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ExponentialFamilyManifolds]","category":"page"},{"location":"#ExponentialFamilyManifolds.Negated","page":"Home","title":"ExponentialFamilyManifolds.Negated","text":"Negated(m)\n\nLazily negates the matrix m, without creating a new matrix.  Works by redefining the getindex.\n\n\n\n\n\n","category":"type"},{"location":"#ExponentialFamilyManifolds.get_natural_manifold-Union{Tuple{T}, Tuple{Type{T}, Any}, Tuple{Type{T}, Any, Any}} where T","page":"Home","title":"ExponentialFamilyManifolds.get_natural_manifold","text":"get_natural_manifold(::Type{T}, conditioner = nothing)\n\nThe function returns a corresponding manifold for the natural parameters of distribution of type T. Optionally accepts the conditioner, which is set to nothing by default.\n\n\n\n\n\n","category":"method"},{"location":"#ExponentialFamilyManifolds.get_natural_manifold_base","page":"Home","title":"ExponentialFamilyManifolds.get_natural_manifold_base","text":"get_natural_manifold_base(::Type{T}, conditioner = nothing)\n\nReturns base manifold for the distribution of type T.\n\n\n\n\n\n","category":"function"},{"location":"#ExponentialFamilyManifolds.partition_point-Tuple{ExponentialFamilyManifolds.NaturalParametersManifold, Any, Any}","page":"Home","title":"ExponentialFamilyManifolds.partition_point","text":"partition_point(M::NaturalParametersManifold, point)\npartition_point(::Type{T}, conditioner, point)\n\nConverts point to a compatible representation for the natural manifold M of type T.\n\n\n\n\n\n","category":"method"}]
}
